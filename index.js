const axios =require("axios");const cheerio =require("cheerio");const constants =require("./dist/constants.js");const utils =require("./dist/utils.js");async function getMail(){try{const response =await axios.get(constants.GENERATOR_URL);if(response.status!==200){console.error(constants.ERROR_LOAD_PAGE);return null}const $ =cheerio.load(response.data);const genEmail =$(constants.S_INPUT_MAIL_GENERATE).text();return genEmail.split(";")[1]||genEmail}catch(error){console.error(constants.ERROR_LOAD_PAGE);console.error(error.message);throw new Error(error)}}async function getInbox(mailAddress, search ={}, settings ={}){try{settings =settings||{};const mail =(mailAddress.split("@")[0]||"").toLowerCase()||mailAddress;const {cookie:cookie,yp:yp} =await utils.getCookiesAndYP();const yj =await utils.getYJ(cookie);return await utils.detailInbox(mail,yp,yj,cookie,search,settings)}catch(error){console.error(constants.ERROR_GET_INBOX);console.error(error.message);throw new Error(error)}}async function deleteInbox(mail){try{const {cookie:cookie,yp:yp} =await utils.getCookiesAndYP();const yj =await utils.getYJ(cookie);const {inbox:inbox} =await getInbox(mail);if(inbox.length>0){const id =inbox[0].id;const url =constants.DELETE_INBOX_URL(mail,id,yp,yj);const response =await axios.get(url,constants.INBOX_HTTP_CONFIG(cookie,mail));return Boolean(200===response.status)}else{return false}}catch(error){console.error(constants.ERROR_DELETE_INBOX);console.error(error.message);throw new Error(error)}}async function readMessage(mail, id, format, selector =""){try{const {cookie:cookie} =await utils.getCookiesAndYP();const response =await axios.get(constants.READ_MAIL_URL(mail,id),constants.INBOX_HTTP_CONFIG(cookie,mail));const $ =cheerio.load(response.data);const submit =$(constants.SELECTOR_SUBMIT).text();const fromSelector =$(constants.SELECTOR_FROM);const dateSelector =$(constants.SELECTOR_DATE);const from =fromSelector.length?fromSelector.text():$(constants.SELECTOR_FROM_ALT).text();const date =dateSelector.length?dateSelector.text().replace(from,""):$(constants.SELECTOR_DATE_ALT).text();let message;if(selector){selector =`${constants.SELECTOR_MAIL} ${selector}`;message =format.toLowerCase()==="html"?$(selector).html():$(selector).text().trim()}else{selector ="#mail";message =format.toLowerCase()==="html"?$(selector).html():$(selector).text().trim()}return{id:id,submit:submit,from:from,date:date,selector:selector,format:format,data:message}}catch(error){console.error(constants.ERROR_READ_MESSAGE);console.error(error.message);throw new Error(error)}}async function writeMessage(mail, to, subject, body){try{if(!mail||!to||!subject||!body){console.error(constants.ERROR_MISSING_PARAMETERS)}const {cookie:cookie} =await utils.getCookiesAndYP();const response =await axios.get(constants.WRITE_MAIL_URL(mail),constants.INBOX_HTTP_CONFIG(cookie,mail));if(response.status===200){const data ={msgfrom:`${mail}@yopmail.com`,msgto:to,msgsubject:subject,msgbody:body};const sendMessage =await axios.post(constants.SEND_MESSAGE_URL,data,constants.WRITE_MESSAGE_HTTP_CONFIG(cookie,mail));return sendMessage.data}return response.data}catch(error){console.error(constants.ERROR_WRITE_MESSAGE);console.error(error.message);throw new Error(error)}}async function deleteMessage(mail, id){try{const {cookie:cookie,yp:yp} =await utils.getCookiesAndYP();const yj =await utils.getYJ(cookie);const {inbox:inbox} =await getInbox(mail,{id:id});if(inbox.length>0){const url =constants.DELETE_MESSAGE_URL(mail,id,yp,yj);const response =await axios.get(url,constants.INBOX_HTTP_CONFIG(cookie,mail));return Boolean(200===response.status)}else{return false}}catch(error){console.error(constants.ERROR_DELETE_MESSAGE);console.error(error.message);throw new Error(error)}}module.exports ={getMail:getMail,getInbox:getInbox,deleteInbox:deleteInbox,readMessage:readMessage,writeMessage:writeMessage,deleteMessage:deleteMessage};